{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Random Forest\n",
    "Build a decison tree to predict the quality of github profiles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#imports\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "from sklearn.ensemble import RandomForestRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "230\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>repos</th>\n",
       "      <th>stars</th>\n",
       "      <th>followers</th>\n",
       "      <th>following</th>\n",
       "      <th>foll_ratio</th>\n",
       "      <th>lang</th>\n",
       "      <th>n_lang</th>\n",
       "      <th>org_flag</th>\n",
       "      <th>n_cont</th>\n",
       "      <th>last_cont</th>\n",
       "      <th>stab_cont</th>\n",
       "      <th>cont_repo_ratio</th>\n",
       "      <th>r1</th>\n",
       "      <th>r2</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>71</td>\n",
       "      <td>306</td>\n",
       "      <td>106</td>\n",
       "      <td>9</td>\n",
       "      <td>11.78</td>\n",
       "      <td>['JavaScript', 'PHP', 'CSS', 'Ruby', 'Shell', ...</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>437</td>\n",
       "      <td>0</td>\n",
       "      <td>0.25</td>\n",
       "      <td>6.15</td>\n",
       "      <td>3.5</td>\n",
       "      <td>4.5</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.00</td>\n",
       "      <td>[]</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>159</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>182</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.00</td>\n",
       "      <td>['JavaScript', 'PHP', 'CSS', 'Ruby', 'Shell']</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>433</td>\n",
       "      <td>3</td>\n",
       "      <td>0.23</td>\n",
       "      <td>36.08</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0.00</td>\n",
       "      <td>['PHP', 'HTML', 'JavaScript']</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>0.50</td>\n",
       "      <td>1.54</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>99</td>\n",
       "      <td>344</td>\n",
       "      <td>370</td>\n",
       "      <td>16</td>\n",
       "      <td>23.12</td>\n",
       "      <td>['C', 'JavaScript', 'Go', 'CMake', 'Jupyter No...</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>255</td>\n",
       "      <td>6</td>\n",
       "      <td>0.02</td>\n",
       "      <td>2.58</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   repos  stars  followers  following  foll_ratio  \\\n",
       "0     71    306        106          9       11.78   \n",
       "1      0      0          0          1        0.00   \n",
       "2     12      1        182          0       -1.00   \n",
       "3     13     31          0         17        0.00   \n",
       "4     99    344        370         16       23.12   \n",
       "\n",
       "                                                lang  n_lang  org_flag  \\\n",
       "0  ['JavaScript', 'PHP', 'CSS', 'Ruby', 'Shell', ...      10         1   \n",
       "1                                                 []       0         0   \n",
       "2      ['JavaScript', 'PHP', 'CSS', 'Ruby', 'Shell']       5         0   \n",
       "3                      ['PHP', 'HTML', 'JavaScript']       3         0   \n",
       "4  ['C', 'JavaScript', 'Go', 'CMake', 'Jupyter No...      10         0   \n",
       "\n",
       "   n_cont  last_cont  stab_cont  cont_repo_ratio   r1   r2    y  \n",
       "0     437          0       0.25             6.15  3.5  4.5  4.0  \n",
       "1       1        159       0.00             0.00  0.0  0.0  0.0  \n",
       "2     433          3       0.23            36.08  4.0  3.0  3.5  \n",
       "3      20          0       0.50             1.54  2.0  2.0  2.0  \n",
       "4     255          6       0.02             2.58  5.0  3.0  4.0  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Read dataset\n",
    "data = pd.read_csv('../data/gitrater.csv',index_col=0)\n",
    "print(len(data))\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "features = ['repos','stars','followers','following','foll_ratio','n_lang','org_flag','n_cont','last_cont','stab_cont','cont_repo_ratio']\n",
    "X = data[features]\n",
    "y = data['y']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=30,random_state = 100)\n",
    "\n",
    "# Fitting the model\n",
    "rf = RandomForestRegressor(max_depth = 4).fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.2810290902045154\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Actual')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Get predictions\n",
    "predictions = rf.predict(X_test)\n",
    "\n",
    "# Calculate MSE \n",
    "print(mean_squared_error(y_test,predictions))\n",
    "\n",
    "# Plot of actual vs predicted \n",
    "plt.figure(figsize=(10, 10), facecolor='w', edgecolor='k')\n",
    "plt.plot(predictions,y_test,'o')\n",
    "plt.plot([0, 5], [0, 5], 'r-', lw=2)\n",
    "plt.xlabel('Predicted',fontsize=22)\n",
    "plt.ylabel('Actual',fontsize=22)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "importances = rf.feature_importances_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['repos']"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "indices = np.argsort(importances)[::-1]\n",
    "labels = [features[i] for i in indices]\n",
    "print(indices)\n",
    "labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature ranking:\n",
      "1. feature 7 (0.785038)\n",
      "2. feature 0 (0.062582)\n",
      "3. feature 2 (0.046857)\n",
      "4. feature 4 (0.020777)\n",
      "5. feature 5 (0.020510)\n",
      "6. feature 3 (0.017460)\n",
      "7. feature 9 (0.014519)\n",
      "8. feature 1 (0.011362)\n",
      "9. feature 8 (0.010893)\n",
      "10. feature 10 (0.007201)\n",
      "11. feature 6 (0.002801)\n"
     ]
    }
   ],
   "source": [
    "print(\"Feature ranking:\")\n",
    "\n",
    "for f in range(X.shape[1]):\n",
    "    print(\"%d. feature %d (%f)\" % (f+1 , indices[f], importances[indices[f]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 5), facecolor='w', edgecolor='k')\n",
    "plt.title(\"Feature importances\")\n",
    "plt.bar(range(X.shape[1]), importances[indices],\n",
    "        color=\"r\", align=\"center\")\n",
    "plt.xticks(ticks=range(X.shape[1]), labels=labels,rotation=90)\n",
    "\n",
    "plt.xlim([-1, X.shape[1]])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exploring with SHAP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "repos               7.00\n",
       "stars              14.00\n",
       "followers          10.00\n",
       "following           2.00\n",
       "foll_ratio          5.00\n",
       "n_lang              3.00\n",
       "org_flag            1.00\n",
       "n_cont             33.00\n",
       "last_cont          45.00\n",
       "stab_cont           0.09\n",
       "cont_repo_ratio     5.00\n",
       "Name: 126, dtype: float64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.iloc[0,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.03293135, -0.00753747, -0.00544494, ..., -0.00468557,\n",
       "        -0.00831226, -0.01237788],\n",
       "       [ 0.28013948,  0.00066404,  0.02548041, ...,  0.02501651,\n",
       "         0.05490963,  0.09424064],\n",
       "       [-0.02618292, -0.00504199, -0.00947615, ...,  0.00069845,\n",
       "        -0.00731375, -0.01823435],\n",
       "       ...,\n",
       "       [-0.03344122, -0.00724007, -0.00669104, ..., -0.00042771,\n",
       "        -0.00316917,  0.00406624],\n",
       "       [ 0.05712777,  0.01325179, -0.01178333, ..., -0.00901396,\n",
       "         0.02094195, -0.06667189],\n",
       "       [-0.05616917, -0.0112611 , -0.00988776, ..., -0.00521658,\n",
       "         0.01133523, -0.00070074]])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "shap_values[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       ".values =\n",
       "array([ 3.62163332e-02, -8.77215057e-03,  1.75532795e-01, -1.99674071e-02,\n",
       "        9.38384959e-02,  8.55924220e-03,  1.56862764e-02,  1.07972753e+00,\n",
       "        3.16278423e-02,  2.92703836e-02, -1.69342779e-04])\n",
       "\n",
       ".base_values =\n",
       "array([2.38845])\n",
       "\n",
       ".data =\n",
       "array([7.100e+01, 3.060e+02, 1.060e+02, 9.000e+00, 1.178e+01, 1.000e+01,\n",
       "       1.000e+00, 4.370e+02, 0.000e+00, 2.500e-01, 6.000e+00])"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "shap_values[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n",
      "2.3884499999999997\n"
     ]
    }
   ],
   "source": [
    "for i in range(len(shap_values)):\n",
    "    shap_values[i].base_values = shap_values[i].base_values[0]\n",
    "    print(shap_values[i].base_values[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.3884499999999997"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "shap_values.base_values[0][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "repos               71.00\n",
       "stars              306.00\n",
       "followers          106.00\n",
       "following            9.00\n",
       "foll_ratio          11.78\n",
       "n_lang              10.00\n",
       "org_flag             1.00\n",
       "n_cont             437.00\n",
       "last_cont            0.00\n",
       "stab_cont            0.25\n",
       "cont_repo_ratio      6.00\n",
       "Name: 0, dtype: float64"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "ename": "Exception",
     "evalue": "waterfall_plot requires a scalar base_values of the model output as the first parameter, but you have passed an array as the first parameter! Try shap.waterfall_plot(explainer.base_values[0], values[0], X[0]) or for multi-output models try shap.waterfall_plot(explainer.base_values[0], values[0][0], X[0]).",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mException\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-26-f522dcb805a4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# visualize the first prediction's explanation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mshap\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplots\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwaterfall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexplainer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0;31m#shap.waterfall_plot(shap_values.base_values[0], shap_values[0][0], X.iloc[0])\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/miniconda3/lib/python3.6/site-packages/shap/plots/_waterfall.py\u001b[0m in \u001b[0;36mwaterfall\u001b[0;34m(shap_values, max_display, show)\u001b[0m\n\u001b[1;32m     50\u001b[0m     \u001b[0;31m# make sure we only have a single output to explain\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbase_values\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbase_values\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbase_values\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m         raise Exception(\"waterfall_plot requires a scalar base_values of the model output as the first \" \\\n\u001b[0m\u001b[1;32m     53\u001b[0m                         \u001b[0;34m\"parameter, but you have passed an array as the first parameter! \"\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m                         \u001b[0;34m\"Try shap.waterfall_plot(explainer.base_values[0], values[0], X[0]) or \"\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mException\u001b[0m: waterfall_plot requires a scalar base_values of the model output as the first parameter, but you have passed an array as the first parameter! Try shap.waterfall_plot(explainer.base_values[0], values[0], X[0]) or for multi-output models try shap.waterfall_plot(explainer.base_values[0], values[0][0], X[0])."
     ]
    }
   ],
   "source": [
    "import xgboost\n",
    "import shap\n",
    "\n",
    "# explain the model's predictions using SHAP\n",
    "# (same syntax works for LightGBM, CatBoost, scikit-learn, transformers, Spark, etc.)\n",
    "explainer = shap.Explainer(rfc)\n",
    "shap_values = explainer(X)\n",
    "\n",
    "# visualize the first prediction's explanation\n",
    "shap.plots.waterfall(explainer(X)[5])\n",
    "#shap.waterfall_plot(shap_values.base_values[0], shap_values[0][0], X.iloc[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<div id='i2SVJ7XG3F706ZN5F9Z5I'>\n",
       "<div style='color: #900; text-align: center;'>\n",
       "  <b>Visualization omitted, Javascript library not loaded!</b><br>\n",
       "  Have you run `initjs()` in this notebook? If this notebook was from another\n",
       "  user you must also trust this notebook (File -> Trust notebook). If you are viewing\n",
       "  this notebook on github the Javascript has been stripped for security. If you are using\n",
       "  JupyterLab this error is because a JupyterLab extension has not yet been written.\n",
       "</div></div>\n",
       " <script>\n",
       "   if (window.SHAP) SHAP.ReactDom.render(\n",
       "    SHAP.React.createElement(SHAP.AdditiveForceVisualizer, {\"outNames\": [\"f(x)\"], \"baseValue\": 2.321805953979492, \"outValue\": -0.13106656074523926, \"link\": \"identity\", \"featureNames\": [\"repos\", \"stars\", \"followers\", \"following\", \"foll_ratio\", \"n_lang\", \"org_flag\", \"n_cont\", \"last_cont\", \"stab_cont\", \"cont_repo_ratio\"], \"features\": {\"0\": {\"effect\": -0.1904987245798111, \"value\": 0.0}, \"1\": {\"effect\": -0.030566738918423653, \"value\": 0.0}, \"2\": {\"effect\": -0.35805609822273254, \"value\": 0.0}, \"3\": {\"effect\": -0.08441157639026642, \"value\": 1.0}, \"4\": {\"effect\": -0.054300326853990555, \"value\": 0.0}, \"5\": {\"effect\": -0.14885306358337402, \"value\": 0.0}, \"6\": {\"effect\": -0.04958511143922806, \"value\": 0.0}, \"7\": {\"effect\": -1.2664276361465454, \"value\": 1.0}, \"8\": {\"effect\": -0.05921250581741333, \"value\": 159.0}, \"9\": {\"effect\": -0.13512037694454193, \"value\": 0.0}, \"10\": {\"effect\": -0.07584039121866226, \"value\": 0.0}}, \"plot_cmap\": \"RdBu\", \"labelMargin\": 20}),\n",
       "    document.getElementById('i2SVJ7XG3F706ZN5F9Z5I')\n",
       "  );\n",
       "</script>"
      ],
      "text/plain": [
       "<shap.plots._force.AdditiveForceVisualizer at 0x7fb32714f358>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "shap.plots.force(shap_values[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 540x360 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "shap.plots.scatter(shap_values[:,\"n_cont\"], color=shap_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x396 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "shap.plots.beeswarm(shap_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'shap_values' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-25-226c8b35369d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mshap\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplots\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshap_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'shap_values' is not defined"
     ]
    }
   ],
   "source": [
    "shap.plots.bar(shap_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 20%|====                | 6351/32561 [04:11<17:15]       "
     ]
    }
   ],
   "source": [
    "import xgboost\n",
    "import shap\n",
    "\n",
    "# train XGBoost model\n",
    "X,y = shap.datasets.adult()\n",
    "model = RandomForestRegressor(n_estimators=100).fit(X, y)\n",
    "\n",
    "# compute SHAP values\n",
    "explainer = shap.Explainer(model, X)\n",
    "shap_values = explainer(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "ename": "Exception",
     "evalue": "waterfall_plot requires a scalar base_values of the model output as the first parameter, but you have passed an array as the first parameter! Try shap.waterfall_plot(explainer.base_values[0], values[0], X[0]) or for multi-output models try shap.waterfall_plot(explainer.base_values[0], values[0][0], X[0]).",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mException\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-12-131bc1c19be6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# visualize the first prediction's explanation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0mshap\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplots\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwaterfall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshap_values\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/miniconda3/lib/python3.6/site-packages/shap/plots/_waterfall.py\u001b[0m in \u001b[0;36mwaterfall\u001b[0;34m(shap_values, max_display, show)\u001b[0m\n\u001b[1;32m     50\u001b[0m     \u001b[0;31m# make sure we only have a single output to explain\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbase_values\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbase_values\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbase_values\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m         raise Exception(\"waterfall_plot requires a scalar base_values of the model output as the first \" \\\n\u001b[0m\u001b[1;32m     53\u001b[0m                         \u001b[0;34m\"parameter, but you have passed an array as the first parameter! \"\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m                         \u001b[0;34m\"Try shap.waterfall_plot(explainer.base_values[0], values[0], X[0]) or \"\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mException\u001b[0m: waterfall_plot requires a scalar base_values of the model output as the first parameter, but you have passed an array as the first parameter! Try shap.waterfall_plot(explainer.base_values[0], values[0], X[0]) or for multi-output models try shap.waterfall_plot(explainer.base_values[0], values[0][0], X[0])."
     ]
    }
   ],
   "source": [
    "import xgboost\n",
    "import shap\n",
    "\n",
    "# train an XGBoost model\n",
    "X, y = shap.datasets.boston()\n",
    "model = RandomForestRegressor(n_estimators=100).fit(X, y)\n",
    "\n",
    "# explain the model's predictions using SHAP\n",
    "# (same syntax works for LightGBM, CatBoost, scikit-learn, transformers, Spark, etc.)\n",
    "explainer = shap.Explainer(model)\n",
    "shap_values = explainer(X)\n",
    "\n",
    "# visualize the first prediction's explanation\n",
    "shap.plots.waterfall(shap_values[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       ".values =\n",
       "array([ 2.56294385e-01, -1.65746861e-03,  1.51331588e-01, -7.72663432e-03,\n",
       "       -2.36447190e-01, -1.29770257e+00, -7.83434747e-02, -9.64159417e-02,\n",
       "       -1.83326816e-01, -2.49362140e-01,  2.92747203e-01,  2.25065352e-02,\n",
       "        4.71186141e+00])\n",
       "\n",
       ".base_values =\n",
       "array([22.45424111])\n",
       "\n",
       ".data =\n",
       "array([6.320e-03, 1.800e+01, 2.310e+00, 0.000e+00, 5.380e-01, 6.575e+00,\n",
       "       6.520e+01, 4.090e+00, 1.000e+00, 2.960e+02, 1.530e+01, 3.969e+02,\n",
       "       4.980e+00])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "shap_values[0]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
